{"version":3,"sources":["components/Listings.tsx","clients/tvmaze.ts","App.tsx","index.tsx"],"names":["Listings","listings","addSelected","map","listing","onClick","Listing","useState","hover","setHover","style","display","width","justifyContent","paddingTop","paddingBottom","borderBottom","cursor","name","fontSize","startDate","endDate","alt","height","src","image","onMouseOver","onMouseOut","url","HoverImage","position","top","episodeCache","Map","MyDiv","styled","div","SelectedDiv","App","text","setText","setListings","selected","setSelected","show","setShow","randomized","setRandomized","entered","query","undefined","fetch","then","resp","json","itvmaze","i","id","premiered","ended","medium","l","console","log","selectRandom","randomShow","Math","floor","random","length","fromCache","get","Promise","resolve","reject","array","set","episodes","itvEpisode","gap","s","index","indexOf","before","slice","after","remove","value","onChange","e","target","type","includes","season","number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7276d16.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport interface IListing {\n  id: number;\n  name: string;\n  startDate: string;\n  endDate: string;\n  image: string;\n}\n\nexport const Listings = ({\n  listings,\n  addSelected,\n}: {\n  listings: Array<IListing>;\n  addSelected: (name: IListing) => void;\n}) => {\n  return (\n    <div>\n      {listings.map((listing) => {\n        return (\n          <Listing listing={listing} onClick={() => addSelected(listing)} />\n        );\n      })}\n    </div>\n  );\n};\n\nconst Listing = ({\n  listing,\n  onClick,\n}: {\n  listing: IListing;\n  onClick: () => void;\n}) => {\n  const [hover, setHover] = useState<boolean>(false);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        width: \"300px\",\n        justifyContent: \"space-between\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        borderBottom: \"1px solid black\",\n      }}\n      onClick={onClick}\n    >\n      <div style={{ cursor: \"pointer\" }}>\n        <div>{listing.name}</div>\n        <div style={{ fontSize: \"13px\" }}>\n          {listing.startDate} - {listing.endDate}\n        </div>\n      </div>\n      <div style={{ display: \"flex\" }}>\n        <img\n          alt={`for ${listing.name}`}\n          height={40}\n          src={listing.image}\n          onMouseOver={() => setHover(true)}\n          onMouseOut={() => setHover(false)}\n        />\n        {hover && <HoverImage url={listing.image} />}\n      </div>\n    </div>\n  );\n};\n\nconst HoverImage = ({ url }: { url: string }) => {\n  return (\n    <div style={{ position: \"relative\", top: \"10px\" }}>\n      <img style={{ position: \"absolute\" }} alt={\"larger\"} src={url} />\n    </div>\n  );\n};\n","export interface ITVMaze {\n  show: {\n    id: number;\n    name: string;\n    premiered: string;\n    ended: string;\n    image: {\n      medium: string;\n    };\n  };\n}\n\nexport interface ITVEpisode {\n  name: string;\n  season: number;\n  number: number;\n}\n\nconst episodeCache: Map<number, Array<ITVEpisode>> = new Map<\n  number,\n  Array<ITVEpisode>\n>();\n\nexport const search = (query: string): Promise<Array<ITVMaze>> =>\n  fetch(`https://api.tvmaze.com/search/shows?q=${query}`)\n    .then((resp) => resp.json())\n    .then((json) => json as Array<ITVMaze>);\n\nexport const episodes = (id: number): Promise<Array<ITVEpisode>> => {\n  const fromCache = episodeCache.get(id);\n  if (fromCache) {\n    return new Promise((resolve, reject) => {\n      resolve(fromCache);\n    });\n  }\n  return fetch(`https://api.tvmaze.com/shows/${id}/episodes`)\n    .then((resp) => resp.json())\n    .then((json) => json as Array<ITVEpisode>)\n    .then((array) => {\n      episodeCache.set(id, array);\n      return array;\n    });\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { IListing, Listings } from \"./components/Listings\";\nimport { episodes, ITVEpisode, search } from \"./clients/tvmaze\";\n\nconst MyDiv = styled.div`\n  font-family: Verdana;\n  & > div {\n    padding-bottom: 5px;\n  }\n`;\n\nconst SelectedDiv = styled.div`\n  cursor: pointer;\n  border: 2px solid grey;\n  border-radius: 20px;\n  padding: 2px 7px 2px 7px;\n`;\n\nexport const App = () => {\n  const [text, setText] = useState<\n    string | number | readonly string[] | undefined\n  >(\"\");\n\n  const [listings, setListings] = useState<Array<IListing>>([]);\n\n  const [selected, setSelected] = useState<Array<IListing>>([]);\n\n  const [show, setShow] = useState<boolean>(false);\n\n  const [randomized, setRandomized] = useState<\n    (ITVEpisode & { show: string }) | undefined\n  >();\n\n  const addSelected = (listing: IListing): void => {\n    if (!selected.includes(listing)) {\n      setSelected([...selected, listing]);\n    }\n  };\n\n  const entered = (\n    name: string | number | readonly string[] | undefined\n  ): void => {\n    if (typeof name === \"string\") {\n      setRandomized(undefined);\n      search(name)\n        .then((itvmaze) =>\n          itvmaze.map((i) => {\n            return {\n              id: i.show.id,\n              name: i.show.name,\n              startDate: i.show.premiered,\n              endDate: i.show.ended,\n              image: i.show.image.medium,\n            } as IListing;\n          })\n        )\n        .then((l) => {\n          setShow(true);\n          setListings(l);\n        });\n    } else {\n      console.log(\"SOME ERROR\", typeof name);\n    }\n  };\n\n  function remove(listing: IListing) {\n    const index = selected.indexOf(listing);\n    const before = selected.slice(0, index);\n    const after = selected.slice(index + 1, selected.length);\n    setSelected([...before, ...after]);\n  }\n\n  function selectRandom() {\n    setShow(false);\n    const randomShow = selected[Math.floor(Math.random() * selected.length)];\n    episodes(randomShow.id).then((episodes) => {\n      const itvEpisode = episodes[Math.floor(Math.random() * episodes.length)];\n      setRandomized({ ...itvEpisode, show: randomShow.name });\n    });\n  }\n\n  return (\n    <MyDiv>\n      <div>Episode Randomizer</div>\n      {selected.length === 0 ? (\n        <div style={{ paddingTop: \"8px\" }}>Nothing selected</div>\n      ) : (\n        <div style={{ display: \"flex\", gap: \"10px\" }}>\n          <button onClick={() => selectRandom()}>Randomize</button>\n          {selected.map((s) => (\n            <SelectedDiv onClick={() => remove(s)}>{s.name}</SelectedDiv>\n          ))}\n        </div>\n      )}\n      <div>\n        <label>\n          Enter Episode Name:{\" \"}\n          <input\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            type={\"text\"}\n          />\n        </label>\n        <button onClick={() => entered(text)}>Search</button>\n      </div>\n      {show && <Listings listings={listings} addSelected={addSelected} />}\n      {randomized && (\n        <div>\n          <div>{randomized.show}</div>\n          <div>\n            Season {randomized.season}, Episode: {randomized.number}\n          </div>\n          <div>{randomized.name} </div>\n        </div>\n      )}\n    </MyDiv>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}